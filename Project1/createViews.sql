CREATE VIEW VIEW_ARE_FRIENDS(USER1_ID, USER2_ID) AS
SELECT USER1_ID, USER2_ID FROM FRIENDS;

CREATE VIEW VIEW_PHOTO_INFORMATION(ALBUM_ID, OWNER_ID, COVER_PHOTO_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME,
ALBUM_LINK, ALBUM_VISIBILITY, PHOTO_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK) AS
SELECT ALBUMS.ALBUM_ID, ALBUMS.ALBUM_OWNER_ID, ALBUMS.COVER_PHOTO_ID, ALBUMS.ALBUM_NAME, ALBUMS.ALBUM_CREATED_TIME,
ALBUMS.ALBUM_MODIFIED_TIME, ALBUMS.ALBUM_LINK, ALBUMS.ALBUM_VISIBILITY, PHOTOS.PHOTO_ID, PHOTOS.PHOTO_CAPTION,
PHOTOS.PHOTO_CREATED_TIME, PHOTOS.PHOTO_MODIFIED_TIME, PHOTOS.PHOTO_LINK
FROM ALBUMS
LEFT JOIN PHOTOS ON ALBUMS.ALBUM_ID = PHOTOS.ALBUM_ID;


CREATE VIEW VIEW_EVENT_INFORMATION(EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION,
EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_ADDRESS, EVENT_CITY, EVENT_STATE, EVENT_COUNTRY, EVENT_START_TIME, EVENT_END_TIME) AS
SELECT USER_EVENTS.EVENT_ID, USER_EVENTS.EVENT_CREATOR_ID, USER_EVENTS.EVENT_NAME, USER_EVENTS.EVENT_TAGLINE, USER_EVENTS.EVENT_DESCRIPTION,
USER_EVENTS.EVENT_HOST, USER_EVENTS.EVENT_TYPE, USER_EVENTS.EVENT_SUBTYPE, USER_EVENTS.EVENT_ADDRESS,
CITIES.CITY_NAME, CITIES.STATE_NAME, CITIES.COUNTRY_NAME,
USER_EVENTS.EVENT_START_TIME, USER_EVENTS.EVENT_END_TIME
FROM USER_EVENTS
LEFT JOIN CITIES ON USER_EVENTS.EVENT_CITY_ID = CITIES.CITY_ID;

CREATE VIEW VIEW_TAG_INFORMATION(PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X, TAG_Y) AS
SELECT TAG_PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X, TAG_Y FROM TAGS;


--TEST CODE
SELECT * FROM jsoren.PUBLIC_PHOTO_INFORMATION
MINUS
SELECT * FROM VIEW_PHOTO_INFORMATION;

SELECT * FROM VIEW_PHOTO_INFORMATION
MINUS
SELECT * FROM jsoren.PUBLIC_PHOTO_INFORMATION;

SELECT LEAST(USER1_ID, USER2_ID), GREATEST(USER1_ID, USER2_ID)
FROM jsoren.PUBLIC_ARE_FRIENDS
MINUS
SELECT LEAST(USER1_ID, USER2_ID), GREATEST(USER1_ID, USER2_ID)
FROM VIEW_ARE_FRIENDS;

SELECT LEAST(USER1_ID, USER2_ID), GREATEST(USER1_ID, USER2_ID)
FROM VIEW_ARE_FRIENDS
MINUS
SELECT LEAST(USER1_ID, USER2_ID), GREATEST(USER1_ID, USER2_ID)
FROM jsoren.PUBLIC_ARE_FRIENDS;
