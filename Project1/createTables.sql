CREATE TABLE USERS (
    USER_ID NUMBER NOT NULL,
    FIRST_NAME VARCHAR2(100) NOT NULL,
    LAST_NAME VARCHAR2(100) NOT NULL,
    YEAR_OF_BIRTH INTEGER,
    MONTH_OF_BIRTH INTEGER,
    DAY_OF_BIRTH INTEGER,
    GENDER VARCHAR2(100),
    CONSTRAINT PK_USERS PRIMARY KEY (USER_ID)
);

CREATE TABLE FRIENDS (
    USER1_ID NUMBER NOT NULL,
    USER2_ID NUMBER NOT NULL,
    CONSTRAINT FK_FRIENDS_1 FOREIGN KEY (USER1_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_FRIENDS_2 FOREIGN KEY (USER2_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT PK_FRIENDS PRIMARY KEY (USER1_ID, USER2_ID)
);

CREATE TABLE CITIES (
    CITY_ID INTEGER NOT NULL,
    CITY_NAME VARCHAR2(100) NOT NULL,
    STATE_NAME VARCHAR2(100) NOT NULL,
    COUNTRY_NAME VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_CITIES PRIMARY KEY (CITY_ID)
);
CREATE TABLE USER_CURRENT_CITIES (
    USER_ID NUMBER NOT NULL,
    CURRENT_CITY_ID INTEGER NOT NULL,
    CONSTRAINT FK_CURRENT_CITIES_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_CURRENT_CITIES_CITY FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID),
    CONSTRAINT PK_CURRENT_CITIES PRIMARY KEY (USER_ID)
);
CREATE TABLE USER_HOMETOWN_CITIES (
    USER_ID NUMBER NOT NULL,
    HOMETOWN_CITY_ID INTEGER NOT NULL,
    CONSTRAINT FK_HOMETOWN_CITIES_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_HOMETOWN_CITIES_CITY FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES(CITY_ID),
    CONSTRAINT PK_HOMETOWN_CITIES PRIMARY KEY (USER_ID)
);
CREATE TABLE MESSAGES (
    MESSAGE_ID NUMBER NOT NULL,
    SENDER_ID NUMBER NOT NULL,
    RECEIVER_ID NUMBER NOT NULL,
    MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
    SENT_TIME TIMESTAMP NOT NULL,
    CONSTRAINT FK_MESSAGES_SENDER FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_MESSAGES_RECEIVER FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT PK_MESSAGES PRIMARY KEY (MESSAGE_ID)
);
CREATE TABLE PROGRAMS (
    PROGRAM_ID INTEGER NOT NULL,
    INSTITUTION VARCHAR2(100) NOT NULL,
    CONCENTRATION VARCHAR2(100) NOT NULL,
    DEGREE VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_PROGRAMS PRIMARY KEY (PROGRAM_ID)
);
CREATE TABLE EDUCATION (
    USER_ID NUMBER NOT NULL,
    PROGRAM_ID INTEGER NOT NULL,
    PROGRAM_YEAR INTEGER NOT NULL,
    CONSTRAINT FK_EDUCATION_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_EDUCATION_PROGRAM FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS(PROGRAM_ID),
    CONSTRAINT PK_EDUCATION PRIMARY KEY (USER_ID, PROGRAM_ID)
);
CREATE TABLE USER_EVENTS (
    EVENT_ID NUMBER NOT NULL,
    EVENT_CREATOR_ID NUMBER NOT NULL,
    EVENT_NAME VARCHAR2(100) NOT NULL,
    EVENT_TAGLINE VARCHAR2(100),
    EVENT_DESCRIPTION VARCHAR2(100),
    EVENT_HOST VARCHAR2(100),
    EVENT_TYPE VARCHAR2(100),
    EVENT_SUBTYPE VARCHAR2(100),
    EVENT_ADDRESS VARCHAR2(2000),
    EVENT_CITY_ID INTEGER NOT NULL,
    EVENT_START_TIME TIMESTAMP,
    EVENT_END_TIME TIMESTAMP,
    CONSTRAINT FK_EVENTS_CREATOR FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_EVENTS_CITY FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES(CITY_ID),
    CONSTRAINT PK_EVENTS PRIMARY KEY (EVENT_ID),
    CONSTRAINT CHECK_TYPE CHECK((EVENT_TYPE IS NOT NULL) OR ((EVENT_TYPE IS NULL) AND (EVENT_SUBTYPE IS NULL)))
);
CREATE TABLE PARTICIPANTS (
    EVENT_ID NUMBER NOT NULL,
    USER_ID NUMBER NOT NULL,
    CONFIRMATION VARCHAR2(100) NOT NULL,
    CONSTRAINT FK_PARTICIPANTS_EVENT FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS(EVENT_ID),
    CONSTRAINT FK_PARTICIPANTS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT PK_PARTICIPANTS PRIMARY KEY (EVENT_ID, USER_ID),
    CONSTRAINT CHECK_PARTICIPANTS CHECK( CONFIRMATION = 'attending' OR
                                         CONFIRMATION = 'unsure' OR
                                         CONFIRMATION = 'declined' OR
                                         CONFIRMATION = 'not_replied')
);
CREATE TABLE ALBUMS (
    ALBUM_ID NUMBER NOT NULL,
    ALBUM_OWNER_ID NUMBER NOT NULL,
    ALBUM_NAME VARCHAR2(100) NOT NULL,
    ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
    ALBUM_MODIFIED_TIME TIMESTAMP,
    ALBUM_LINK VARCHAR2(100) NOT NULL,
    ALBUM_VISIBILITY VARCHAR2(100) NOT NULL,
    COVER_PHOTO_ID NUMBER NOT NULL,
    CONSTRAINT FK_ALBUMS_OWNER FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT PK_ALBUMS PRIMARY KEY (ALBUM_ID),
    CONSTRAINT CHECK_ALBUMS CHECK( ALBUM_VISIBILITY = 'EVERYONE' OR
                                   ALBUM_VISIBILITY = 'FRIENDS' OR
                                   ALBUM_VISIBILITY = 'FRIENDS_OF_FRIENDS' OR
                                   ALBUM_VISIBILITY = 'MYSELF')
);
CREATE TABLE PHOTOS (
    PHOTO_ID NUMBER NOT NULL,
    ALBUM_ID NUMBER NOT NULL,
    PHOTO_CAPTION VARCHAR2(2000),
    PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
    PHOTO_MODIFIED_TIME TIMESTAMP,
    PHOTO_LINK VARCHAR2(2000) NOT NULL,
    CONSTRAINT PK_PHOTOS PRIMARY KEY (PHOTO_ID)
);
CREATE TABLE TAGS (
    TAG_PHOTO_ID NUMBER NOT NULL,
    TAG_SUBJECT_ID NUMBER NOT NULL,
    TAG_CREATED_TIME TIMESTAMP NOT NULL,
    TAG_X NUMBER NOT NULL,
    TAG_Y NUMBER NOT NULL,
    CONSTRAINT FK_TAGS_PHOTO FOREIGN KEY (TAG_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID),
    CONSTRAINT FK_TAGS_SUBJECT FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT PK_TAGS PRIMARY KEY (TAG_PHOTO_ID, TAG_SUBJECT_ID)
);

ALTER TABLE PHOTOS ADD CONSTRAINT CIRCULAR_PHOTOS 
FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS(ALBUM_ID)
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE ALBUMS ADD CONSTRAINT FK_ALBUMS_PHOTO 
FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID)
INITIALLY DEFERRED DEFERRABLE;


CREATE SEQUENCE SEQ_CITIES
START WITH 1
INCREMENT BY 1 ;

CREATE TRIGGER TR_CITIES
  BEFORE INSERT ON CITIES
    FOR EACH ROW
      BEGIN
        SELECT SEQ_CITIES.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
      END;
/

CREATE SEQUENCE SEQ_PROGRAMS
START WITH 1
INCREMENT BY 1 ;

CREATE TRIGGER TR_PROGRAMS
  BEFORE INSERT ON PROGRAMS
    FOR EACH ROW
      BEGIN
        SELECT SEQ_PROGRAMS.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
      END;
/


CREATE TRIGGER order_friends_pairs
BEFORE INSERT ON FRIENDS
FOR EACH ROW
DECLARE temp NUMBER;
BEGIN
IF :NEW.USER1_ID > :NEW.USER2_ID THEN
temp := :NEW.USER2_ID;
:NEW.USER2_ID := :NEW.USER1_ID;
:NEW.USER1_ID := temp ;
END IF ;
END;
/
