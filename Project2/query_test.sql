SELECT N.USER_ID, U.FIRST_NAME, U.LAST_NAME FROM 
((SELECT USER1_ID AS USER_ID FROM FRIENDS WHERE USER2_ID = 215) UNION (SELECT USER2_ID AS USER_ID FROM FRIENDS WHERE USER1_ID = 215)) N
JOIN USERS U ON N.USER_ID = U.USER_ID
ORDER BY U.YEAR_OF_BIRTH ASC, U.MONTH_OF_BIRTH ASC, U.DAY_OF_BIRTH ASC, U.USER_ID DESC;






((SELECT USER1_ID AS USER_ID FROM FRIENDS WHERE USER2_ID = 215) UNION (SELECT USER2_ID AS USER_ID FROM FRIENDS WHERE USER1_ID = 215))





(
(SELECT USER1_ID, USER2_ID FROM FRIENDS WHERE USER1_ID < USER2_ID)
UNION
(SELECT USER2_ID AS USER1_ID, USER1_ID AS USER2_ID FROM FRIENDS WHERE USER1_ID > USER2_ID)
)


SELECT F.USER1_ID, U1.FIRST_NAME, U1.LAST_NAME, F.USER2_ID, U2.FIRST_NAME, U2.LAST_NAME FROM 
(
(SELECT USER1_ID, USER2_ID FROM FRIENDS WHERE USER1_ID < USER2_ID)
UNION
(SELECT USER2_ID AS USER1_ID, USER1_ID AS USER2_ID FROM FRIENDS WHERE USER1_ID > USER2_ID)
)
F
JOIN USERS U1 ON U1.USER_ID = F.USER1_ID
JOIN USERS U2 ON U2.USER_ID = F.USER2_ID
JOIN USER_HOMETOWN_CITIES HC1 ON HC1.USER_ID = U1.USER_ID
JOIN USER_HOMETOWN_CITIES HC2 ON HC2.USER_ID = U2.USER_ID
WHERE HC1.HOMETOWN_CITY_ID = HC2.HOMETOWN_CITY_ID
AND U1.LAST_NAME = U2.LAST_NAME
AND ABS(U1.YEAR_OF_BIRTH - U2.YEAR_OF_BIRTH) < 10
ORDER BY F.USER1_ID ASC, F.USER2_ID ASC;





SELECT STATE_NAME, COUNT(STATE_NAME) AS NUM FROM CITIES C
JOIN USER_EVENTS E ON E.EVENT_CITY_ID = C.CITY_ID
GROUP BY STATE_NAME
ORDER BY NUM DESC;




SELECT N.USER1_ID, U1.FIRST_NAME, U1.LAST_NAME, U1.YEAR_OF_BIRTH, 
N.USER2_ID, U2.FIRST_NAME, U2.LAST_NAME, U2.YEAR_OF_BIRTH FROM 
(
SELECT DISTINCT T1.TAG_SUBJECT_ID AS USER1_ID, T2.TAG_SUBJECT_ID AS USER2_ID, T1.TAG_PHOTO_ID AS PHOTO_ID FROM TAGS T1
JOIN TAGS T2 ON T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID AND T1.TAG_SUBJECT_ID < T2.TAG_SUBJECT_ID
) N
JOIN USERS U1 ON U1.USER_ID = N.USER1_ID
JOIN USERS U2 ON U2.USER_ID = N.USER2_ID
WHERE U1.GENDER = U2.GENDER
AND NOT EXISTS (SELECT USER1_ID, USER2_ID FROM 
(
(SELECT USER1_ID, USER2_ID FROM FRIENDS WHERE USER1_ID < USER2_ID)
UNION
(SELECT USER2_ID AS USER1_ID, USER1_ID AS USER2_ID FROM FRIENDS WHERE USER1_ID > USER2_ID)
) F
WHERE F.USER1_ID = N.USER1_ID AND F.USER2_ID = N.USER2_ID
)
AND ABS(U1.YEAR_OF_BIRTH - U2.YEAR_OF_BIRTH) <= 2
ORDER BY N.USER1_ID ASC, N.USER2_ID ASC;



SELECT P.PHOTO_ID, P.ALBUM_ID, P.PHOTO_LINK, A.ALBUM_NAME  FROM PHOTOS P
JOIN ALBUMS A ON A.ALBUM_ID = P.ALBUM_ID
JOIN TAGS T1 ON T1.TAG_PHOTO_ID = P.PHOTO_ID
JOIN TAGS T2 ON T2.TAG_PHOTO_ID = P.PHOTO_ID AND T1.TAG_SUBJECT_ID < T2.TAG_SUBJECT_ID
WHERE T1.TAG_SUBJECT_ID = 353 AND T2.TAG_SUBJECT_ID = 761;





(SELECT T.TAG_PHOTO_ID AS PHOTO_ID FROM TAGS T
GROUP BY T.TAG_PHOTO_ID
ORDER BY COUNT(T.TAG_PHOTO_ID) DESC, T.TAG_PHOTO_ID ASC)



 
SELECT T.TAG_PHOTO_ID AS PHOTO_ID FROM TAGS T
GROUP BY T.TAG_PHOTO_ID
ORDER BY COUNT(T.TAG_PHOTO_ID) DESC, T.TAG_PHOTO_ID ASC


SELECT A.ALBUM_ID, P.PHOTO_LINK, A.ALBUM_NAME FROM PHOTOS P
JOIN ALBUMS A ON A.ALBUM_ID = P.ALBUM_ID
WHERE P.PHOTO_ID = 8


SELECT U.USER_ID, U.FIRST_NAME, U.LAST_NAME FROM TAGS T
JOIN USERS U ON U.USER_ID = T.TAG_SUBJECT_ID
WHERE T.TAG_PHOTO_ID = 8
ORDER BY U.USER_ID ASC






CREATE VIEW FVIEW AS
(SELECT USER1_ID, USER2_ID FROM FRIENDS WHERE USER1_ID < USER2_ID)
UNION
(SELECT USER2_ID AS USER1_ID, USER1_ID AS USER2_ID FROM FRIENDS WHERE USER1_ID > USER2_ID);

CREATE VIEW MUTUALVIEW AS 
(
(
SELECT DISTINCT A.USER1_ID AS A_ID, A.USER2_ID AS B_ID, C.USER2_ID AS C_ID FROM FVIEW A
JOIN FVIEW C ON A.USER2_ID = C.USER1_ID AND A.USER1_ID < C.USER2_ID
)
UNION
(
SELECT DISTINCT A.USER2_ID AS A_ID, A.USER1_ID AS B_ID, C.USER2_ID AS C_ID FROM FVIEW A
JOIN FVIEW C ON A.USER1_ID = C.USER1_ID AND A.USER2_ID < C.USER2_ID
)
UNION
(
SELECT DISTINCT C.USER2_ID AS A_ID, A.USER1_ID AS B_ID, A.USER2_ID AS C_ID FROM FVIEW A
JOIN FVIEW C ON A.USER1_ID = C.USER1_ID AND C.USER2_ID < A.USER2_ID
)
UNION
(
SELECT DISTINCT A.USER1_ID AS A_ID, A.USER2_ID AS B_ID, C.USER1_ID AS C_ID FROM FVIEW A
JOIN FVIEW C ON A.USER2_ID = C.USER2_ID AND A.USER1_ID < C.USER1_ID
)
UNION
(
SELECT DISTINCT C.USER1_ID AS A_ID, A.USER2_ID AS B_ID, A.USER1_ID AS C_ID FROM FVIEW A
JOIN FVIEW C ON A.USER2_ID = C.USER2_ID AND C.USER1_ID < A.USER1_ID
)
);


SELECT A_ID, C_ID FROM MUTUALVIEW
GROUP BY A_ID, C_ID
ORDER BY COUNT(B_ID) DESC, A_ID ASC, C_ID ASC;


SELECT USER1_ID FROM FVIEW
WHERE USER1_ID = 10 AND USER2_ID = 566


SELECT B_ID FROM MUTUALVIEW
WHERE A_ID = 10 AND C_ID = 566




DROP VIEW FVIEW;
DROP VIEW MUTUALVIEW;








UNION
(
SELECT DISTINCT A.USER2_ID AS A_ID, A.USER1_ID AS B_ID, C.USER1_ID AS C_ID FROM
(
(SELECT USER1_ID, USER2_ID FROM FRIENDS WHERE USER1_ID < USER2_ID)
UNION
(SELECT USER2_ID AS USER1_ID, USER1_ID AS USER2_ID FROM FRIENDS WHERE USER1_ID > USER2_ID)
) 
A
JOIN 
(
(SELECT USER1_ID, USER2_ID FROM FRIENDS WHERE USER1_ID < USER2_ID)
UNION
(SELECT USER2_ID AS USER1_ID, USER1_ID AS USER2_ID FROM FRIENDS WHERE USER1_ID > USER2_ID)
) 
C ON A.USER1_ID = C.USER2_ID AND A.USER2_ID < C.USER1_ID
)






